・Spring Ioc DI
控制反转（Inversion of Control） 是一种重要的设计思想，通过ioc容器能够不使用new就能实例化对象，class对应类，id为它的标识符，需要使用通过applicationContext的getbean方法就能使用实例化好的类
DI：依赖注入 控制反转也能称之为依赖注入。DI是指将SpringIOC容器的资源注入到对象之中去。
有三种注入方式
・setter设值注入  
<property name="" value=""><property/>这个注入方式间接的调用了setter方法。
・构造器注入  
<property>
<construtor-arg name..value..></..>
</property>
特别注意，使用之前需要提供构造方法
・p命名空间注入
使用之前需要配置相应的文件xmlns:p="http://www.springframework.org/schema/p"
不再使用name，value，而是使用p：属性名来赋值





・双亲上下文
Spring的ApplicationContext实例限制在不同的作用域scope中
在每个mvc框架中，每个DispatcherServlet有他自己的WebApplicationContext,这个context继承了根WebApplicationContext的所有的bean定义
这些继承的bean也可以在每个servlet自己所属的区域被重写（override），覆盖后的bean可以设置成这个servlet只有自己的属性





・配置依赖DI
以上说了配置依赖的三种方式，还能通过注解来配置@Component定义了一个名为studentDao的Bean，@Component("studentDao")的作用等价于XML形式的<bean id="studentDao" class="org.lanqiao.dao.StudentDaoImpl" />。
@Component//包含以下三种作用域
@Repository//Dao
@Service//service
@Controller//控制层 比如servlet



・自动装配
@Autowired 默认按属性类型自动装配
@Qualifler 按属性名进行装配


・DispatcherServlet
拦截分发器，前置控制器，通过集成spring ioc容器，在通过DispathcherServlet分发。


・加载访问静态资源
因为在web.xml中设置了DispatcherServlet的url-pattern是“/”，会拦截一切请求
所以要在springmvc.xml中加上
<mvc:default-servlet-handler/>
<mvc:annotation-driven></mvc:annotation-driven>
























































































































